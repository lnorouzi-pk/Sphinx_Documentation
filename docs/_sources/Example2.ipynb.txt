{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The Jupter in sphinx\n",
    "## Packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-10-19T02:01:18.975491Z",
     "start_time": "2019-10-19T02:01:18.447645Z"
    }
   },
   "outputs": [],
   "source": [
    "'''\n",
    "Jupyter Notebook\n",
    "================\n",
    "\n",
    "\n",
    "This code is a practice to generate a Sphinx documentation.\n",
    "'''\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Varibales"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-10-19T02:01:18.992697Z",
     "start_time": "2019-10-19T02:01:18.977183Z"
    }
   },
   "outputs": [],
   "source": [
    "\n",
    "df = pd.DataFrame(columns=['name','value'])\n",
    "b = 'This is Sphinx!'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-10-19T02:01:18.998718Z",
     "start_time": "2019-10-19T02:01:18.994746Z"
    }
   },
   "outputs": [],
   "source": [
    "def making_df(arg1):\n",
    "    '''\n",
    "    Function\n",
    "    --------\n",
    "    This is function takes a sting and makes a data frame out of it\n",
    "    \n",
    "    :param arg1: a string \n",
    "    \n",
    "    :return : Returns a data frame\n",
    "    \n",
    "    '''\n",
    "    s_list = []\n",
    "    i_list = []\n",
    "\n",
    "\n",
    "    for i,s in enumerate(b.split()):\n",
    "             s_list = s_list+[s]\n",
    "             i_list = i_list+[i]\n",
    "\n",
    "    df.loc[:,'name'] = s_list\n",
    "    df.loc[:,'value'] = i_list\n",
    "    return df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-10-19T02:02:40.923489Z",
     "start_time": "2019-10-19T02:02:40.918381Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      name  value\n",
      "0     This      0\n",
      "1       is      1\n",
      "2  Sphinx!      2\n",
      "***THE END***\n"
     ]
    }
   ],
   "source": [
    "print(making_df(b))\n",
    "\n",
    "print('***THE END***')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
